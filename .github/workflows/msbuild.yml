name: MSBuild

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: ./build_vs2017_64/mmdbridge.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release
  BULID_PLATFORM: x64
 
  VCPKG_INSTALL_PATH: "$env:VCPKG_INSTALLATION_ROOT/installed"
  
jobs:
  install_libs:
    runs-on: windows-2016
    
    steps:
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1
      
    - name: Check MSBuild.exe
      run: MSBuild.exe -version | Out-File -FilePath $env:GITHUB_WORKSPACE\MSBuild_version
      
    - name: Add VCPKG_DIR to ENV
      run : echo "VCPKG_DIR=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
      shell: bash
      
    # https://stackoverflow.com/questions/61037714/how-to-install-an-old-version-of-the-direct-x-api-in-github-actions
    - name:  Add DXSDK_DIR to ENV
      run:   echo "DXSDK_DIR=$HOME/cache/" >> $GITHUB_ENV
      shell: bash
      
    - name: DXSDK from cache
      id:   cache
      uses: actions/cache@v2
      with:
        path: ~/cache
        key:  cache
        
    - name: DXSDK cache create
      if:    steps.cache.outputs.cache-hit != 'true'
      run:   |
         curl -L https://download.microsoft.com/download/a/e/7/ae743f1f-632b-4809-87a9-aa1bb3458e31/DXSDK_Jun10.exe -o _DX2010_.exe
         7z x _DX2010_.exe DXSDK/Include -o_DX2010_
         7z x _DX2010_.exe DXSDK/Lib/x64 -o_DX2010_
         mv _DX2010_/DXSDK $HOME/cache
         rm -fR _DX*_ _DX*_.exe
      shell: bash
      
    - uses: actions/cache@v2
      id: vcpkgcache
      with:
       path: C:/vcpkg/installed
       key: ${{ runner.os }}-vcpkg-${{ hashFiles('MSBuild_version') }}

    - name: show files
      run: |
        ls C:/vcpkg/installed/x64-windows/
        echo "----"
        ls .
      shell: bash

    - name: Update vcpkg and install packages
      if: steps.vcpkgcache.outputs.cache-hit != 'true'
      run: |
        # cd $env:VCPKG_INSTALLATION_ROOT
        # git pull origin master
        # .\bootstrap-vcpkg.bat
        vcpkg install alembic:x64-windows pybind11:x64-windows
    
    - name: vcpkg integration
      run: vcpkg integrate install

    - name: Checkout MMDBridge
      uses: actions/checkout@v2

    - name: cmake
      shell: cmd
      run: .\cmake_vs2017_64.bat

